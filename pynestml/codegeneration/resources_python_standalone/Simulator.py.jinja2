{#-
Simulator.py.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
DEBUG = 1
{%- if tracing %}# generated by {{self._TemplateReference__context.name}}{% endif -%}
"""
Simulator.py

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.

Generated from NESTML at time: {{now}}
"""

from typing import Optional

import numpy as np


class Simulator:
    neuron: Optional[Neuron]
    timestep: float = .1      # should stay constant (static variable), don't change at runtime!

    def steps(self, time_ms: float):
        r"""Convert a time period (in milliseconds) to number of simulation steps"""
        return int(np.ceil(time_ms / self.timestep))

    def run(self):

        solution = odeint(self.neuron.dynamics, y0, np.linspace(0., 351., 100), args=(self.neuron))
