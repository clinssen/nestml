/*
 *  {{ neuronName }}_kernel.h
 *
 *  This file is part of NEST GPU.
 *
 *  Copyright (C) 2021 The NEST Initiative
 *
 *  NEST GPU is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST GPU is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST GPU.  If not, see <http://www.gnu.org/licenses/>.
 *
 */





#ifndef {{ neuronName.upper() }}_KERNEL)_H
#define {{ neuronName.upper() }}_KERNEL)_H

#include <string>
#include <cmath>
#include "spike_buffer.h"
#include "node_group.h"
#include "{{ neuronName }}.h"

namespace {{neuronName}}_ns
{
 template<int NVAR, int NPARAM> //, class DataStruct>
__device__
    void Derivatives(double x, float *y, float *dydx, float *param,
		     {{ neuronName }}_rk5 data_struct)
{
  float I_syn_tot = 0.0;
  I_syn_tot += I_syn_ex - I_syn_in;

  float V = ( refractory_step > 0 ) ? V_reset :  MIN(V_m, V_peak);

  float V_spike = Delta_T == 0. ? 0. : Delta_T*exp((V - V_th)/Delta_T);

  dVdt = ( refractory_step > 0 ) ? 0 :
    ( -g_L*(V - E_L - V_spike) + I_syn_tot - w + I_e) / C_m;
  // Adaptation current w.
  dwdt = (a*(V - E_L) - w) / tau_w;
  dI_syn_exdt = -I_syn_ex / tau_syn_ex;
  dI_syn_indt = -I_syn_in / tau_syn_in;
}

 template<int NVAR, int NPARAM> //, class DataStruct>
__device__
    void ExternalUpdate
    (double x, float *y, float *param, bool end_time_step,
			{{ neuronName }}_rk5 data_struct)
{
{%- if neuron.get_update_blocks() %}
{%-     filter indent(2) %}
{%-         for block in neuron.get_update_blocks() %}
{%-             set ast = block.get_block() %}
{%-             if ast.print_comment('*')|length > 1 %}
  /*
  {{ast.print_comment('*')}}
  */
{%-             endif %}
{%-             include "directives/Block.jinja2" %}
{%-         endfor %}
{%-     endfilter %}
{%- endif %}
}


}; //namespace


int Update(long long it, double t1);

template<int NVAR, int NPARAM>
__device__
void Derivatives(double x, float *y, float *dydx, float *param,
		 {{ neuronName }}_rk5 data_struct)
{
    {{ neuronName }}_ns::Derivatives<NVAR, NPARAM>(x, y, dydx, param,
						 data_struct);
}

template<int NVAR, int NPARAM>
__device__
void ExternalUpdate(double x, float *y, float *param, bool end_time_step,
		    {{ neuronName }}_rk5 data_struct)
{
    {{ neuronName }}_ns::ExternalUpdate<NVAR, NPARAM>(x, y, param,
						    end_time_step,
						    data_struct);
}


#endif