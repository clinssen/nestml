{#-
test_python_standalone_module.py.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}

import unittest

from simulator import Simulator
from spike_generator import SpikeGenerator

{% for neuron in neurons %}
from {{neuron.get_name()}} import Neuron_{{neuron.get_name()}}
{% endfor %}

{% for synapse in synapses %}
from {{synapse.get_name()}} import Synapse_{{synapse.get_name()}}
{% endfor %}


class SimulatorTest(unittest.TestCase):
    def test_simulator(self):
        simulator = Simulator()

        sg = simulator.add_neuron(SpikeGenerator())
{% for neuron in neurons %}
        neuron = simulator.add_neuron(Neuron_{{neuron.get_name()}}(timestep=simulator.timestep))
        simulator.connect(sg, neuron, "ex_spikes")
{% endfor %}

        simulator.run(100.)

        import matplotlib.pyplot as plt
        fig, ax = plt.subplots()
        for neuron_id, neuron_log in simulator.log.items():
            if neuron_id == "t":
                continue
            for var_name, values in neuron_log.items():
                ax.plot(simulator.log["t"], values, label="Neuron " + str(neuron_id) + ": " + str(var_name))
        fig.legend()
        plt.show()
        import pdb;pdb.set_trace()