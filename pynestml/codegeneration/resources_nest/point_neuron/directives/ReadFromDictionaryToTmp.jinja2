{#
  Generates a code snippet that retrieves a data from dictionary and sets it the the model variable.
  @param variable VariableSymbol
#}
{%- import 'directives/VectorSizeParameter.jinja2' as vector_size_parameter with context %}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}

{%- if not variable_symbol.is_inline_expression %}
{%- if not variable_symbol.is_state() %}
{{ declarations.print_variable_type(variable_symbol) }} tmp_{{ printer.print(variable) }} = {{ variable_getter_printer.print(variable) }}();
updateValue<{{declarations.print_variable_type(variable_symbol)}}>(__d, nest::{{names_namespace}}::_{{ printer.print(variable) }}, tmp_{{ printer.print(variable) }});

{%- if vector_symbols|length > 0 %}
// Resize vectors
if (tmp_{{ printer.print(variable) }} != {{ variable_getter_printer.print(variable) }}())
{
{%- for vector_var in vector_symbols %}
{%- if vector_var.get_vector_parameter().is_variable() and vector_var.get_vector_parameter().get_variable().get_complete_name() == variable.get_symbol_name() %}
  {{declarations.print_variable_type(vector_var)}} _tmp_{{ printer.print(utils.get_state_variable_by_name(astnode, vector_var)) }} = {{variable_getter_printer.print(vector_var)}}();
  _tmp_{{ vector_var.get_symbol_name() }}.resize(tmp_{{ printer.print(variable) }}, 0.);
  set_{{ vector_var.get_symbol_name() }}(_tmp_{{ vector_var.get_symbol_name() }});
{%- endif %}
{%- endfor %}
}
{%- endif %}

{%- else %}
{{declarations.print_variable_type(variable_symbol)}} tmp_{{ printer.print(variable) }} = {{variable_getter_printer.print(variable)}}();
updateValue< {{declarations.print_variable_type(variable_symbol)}} >(__d, nest::{{names_namespace}}::_{{variable_symbol.get_symbol_name()}}, tmp_{{ printer.print(variable) }});
{%- endif %}

{%- if variable.has_vector_parameter() %}
 {#
Typecast the vector parameter to an int. If the typecast fails with a return value of 0, the vector parameter is a
variable
 #}
{%- if variable.get_vector_parameter().is_numeric_literal() -%}
{%- set vector_size = vector_size_parameter.VectorSizeParameter(variable, true) %}
{%- elif variable.get_vector_parameter().is_variable() -%}
{%- set vector_size = "tmp_" + vector_size_parameter.VectorSizeParameter(variable, false) %}
{%- else %}
{{ raise("Vector size expression needs to be numeric literal or variable") }}
{%- endif %}
// Check if the new vector size matches its original size
if ( tmp_{{ printer.print(variable) }}.size() != {{vector_size}} )
{
  std::stringstream msg;
  msg << "The vector \"{{ printer.print(variable) }}\" does not match its size: " << {{vector_size}};
  throw nest::BadProperty(msg.str());
}
{%- endif %}
{%- else %}
  // ignores '{{ printer.print(variable) }}' {{ declarations.print_variable_type(variable_symbol) }}' since it is a function and setter isn't defined
{%- endif %}
