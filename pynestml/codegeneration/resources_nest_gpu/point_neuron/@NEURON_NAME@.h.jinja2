/*
 *  {{ neuronName }}.h
 *
 *  This file is part of NEST GPU.
 *
 *  Copyright (C) 2021 The NEST Initiative
 *
 *  NEST GPU is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST GPU is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST GPU.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef {{ neuronName.upper() }}_H
#define {{ neuronName.upper() }}_H

#include <iostream>
#include <string>
#include "cuda_error.h"
#include "rk5.h"
#include "node_group.h"
#include "base_neuron.h"
#include "neuron_models.h"

namespace {{ neuronName }}_ns
{
enum ScalVarIndexes {
{%- for variable_symbol in neuron.get_state_symbols() %}
{%-     set variable = utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  i_{{ printer_no_origin.print(variable) }},
{%- endfor %}
  N_SCAL_VAR
};

enum ScalParamIndexes {
{%- for variable_symbol in neuron.get_parameter_symbols() %}
{%-     set variable = utils.get_parameter_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  i_{{ printer_no_origin.print(variable) }},
{%- endfor %}

{%- for variable_symbol in neuron.get_internal_symbols() %}
{%-     set variable = utils.get_internal_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  i_{{ printer_no_origin.print(variable) }}
{%- endfor %}
  N_SCAL_PARAM
};



const std::string {{ neuronName }}_scal_var_name[N_SCAL_VAR] = {
{%- for variable_symbol in neuron.get_state_symbols() %}
{%-     set variable = utils.get_state_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  "{{ printer_no_origin.print(variable) }}",
{%- endfor %}
};


const std::string {{ neuronName }}_scal_param_name[N_SCAL_PARAM] = {
{%- for variable_symbol in neuron.get_parameter_symbols() %}
{%-     set variable = utils.get_parameter_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  "{{ printer_no_origin.print(variable) }}",
{%- endfor %}

{%- for variable_symbol in neuron.get_internal_symbols() %}
{%-     set variable = utils.get_internal_variable_by_name(astnode, variable_symbol.get_symbol_name()) %}
  "{{ printer_no_origin.print(variable) }}",
{%- endfor %}
};

} // namespace

class {{ neuronName }} : public BaseNeuron
{
 public:
  ~{{ neuronName }}();

  int Init(int i_node_0, int n_neuron, int n_port, int i_group,
	   unsigned long long *seed);

  int Calibrate(double, float time_resolution);

  int Update(long long it, double t1);

  int Free();

};


#endif
