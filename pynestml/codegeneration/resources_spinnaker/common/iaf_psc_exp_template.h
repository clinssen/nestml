#ifndef _IAF_PSC_EXP_IMPL_
#define _IAF_PSC:EXP_IMPL_

#include <stdint.h>
#include <stdbool.h>

#include <neuron/implementations/neuron_impl.h>
#include <spin1_api.h>
#include <debug.h>

// -------------------------------------------------------------------------
//  Defines
// -------------------------------------------------------------------------
#define V_RECORDING_INDEX 0
#define N_RECORDED_VARS 1

#define SPIKE_RECORDING_BITFIELD 0
#define N_BITFIELD_VARS 1


#include <neuron/neuron_recording.h>
#include <neuron/current_sources/current_source_impl.h>
#include <neuron/current_sources/current_source.h>

// -------------------------------------------------------------------------
//  Struct definitions
// -------------------------------------------------------------------------
struct Parameters_ {

    //TODO: double here should be replaced by "accum" (Spinnaker wrapper for double)
    double C_m;
    double tau_m;
    double tau_syn_inh;
    double tau_syn_exc; 
    double t_ref;
    double E_L;
    double V_reset;
    double V_th;
    double I_e;
};

struct State_ {
    long r;

    //TODO: double here should be replaced by "accum" (Spinnaker wrapper for double)
    double V_m;
    double I_kernel_exc__X__exc_spikes;
    double I_kernel_inh__X__inh_spikes;
};

struct DelayVariables_ {
    // Empty for this example
};

struct Variables_ {
    long RefractoryCounts;

    //TODO: double here should be replaced by "accum" (Spinnaker wrapper for double)
    double __h;
    double __P__V_m__V_m;
    double __P__V_m__I_kernel_exc__X__exc_spikes;
    double __P__V_m__I_kernel_inh__X__inh_spikes;
    double __P__I_kernel_exc__X__exc_spikes__I_kernel_exc__X__exc_spikes;
    double __P__I_kernel_inh__X__inh_spikes__I_kernel_inh__X__inh_spikes;
};

struct Buffers_ {
    // -----------------------------------------------------------------------
    //   Buffers and sums of incoming spikes/currents per timestep
    // -----------------------------------------------------------------------
    // Buffer containing the incoming spikes
    /* generated by directives_cpp/SpikeBufferGetter.jinja2 */ 

    inline std::vector< nest::RingBuffer >& get_spike_inputs_()
    {
        return spike_inputs_;
    }
    std::vector< nest::RingBuffer > spike_inputs_;

        // Buffer containing the sum of all the incoming spikes
        /* generated by directives_cpp/SpikeBufferGetter.jinja2 */ 

    inline std::vector< double >& get_spike_inputs_grid_sum_()
    {
        return spike_inputs_grid_sum_;
    }
    std::vector< double > spike_inputs_grid_sum_;
    /* generated by directives_cpp/BufferDeclaration.jinja2 */ 
    nest::RingBuffer
    I_stim;   //!< Buffer for input (type: pA)    /* generated by directives_cpp/ContinuousInputBufferGetter.jinja2 */ 
        inline nest::RingBuffer& get_I_stim() {
            return I_stim;
        }
    /* generated by directives_cpp/BufferDeclarationValue.jinja2 */ 
    double I_stim_grid_sum_;
       
};

// -------------------------------------------------------------------------
//  Type definitions
// -------------------------------------------------------------------------

typedef struct iaf_psc_exp {
    //TODO: double here should be replaced by "accum" (Spinnaker wrapper for double)
    double inputs[2]; 

    struct Parameters_ P_;
    struct State_ S_;
    struct DelayVariables_ DV_;
    struct Variables_ V_;
    struct Buffers_ B_;
    


} iaf_psc_exp;

// -------------------------------------------------------------------------
//  Constants
// -------------------------------------------------------------------------

const double MIN_SPIKE_RECEPTOR = 0; // TODO: correct type of "nest::port" (assumed double)
const double PORT_NOT_AVAILABLE = -1; // TODO: correct type of "nest::port" (assumed double)
 

// -------------------------------------------------------------------------
//  Constructors
// -------------------------------------------------------------------------
static struct Parameters_ Parameters_init ();

static struct State_ State_init ();

static struct Variables_ Variables_init ();

static struct Buffers_ Buffers_init (iaf_psc_exp * neuron);
static struct Buffers_ Buffers_init_copy (const struct Buffers_ * buffer, iaf_psc_exp * neuron);

static iaf_psc_exp iaf_psc_exp_init ();
static iaf_psc_exp iaf_psc_exp_copy_init (const iaf_psc_exp * neuron);

// -------------------------------------------------------------------------
//  Functions
// -------------------------------------------------------------------------


void recompute_internal_variables (bool exlude_timestep);

__attribute__((unused))
static bool neuron_impl_initialise (uint32_t n_neurons);

__attribute__((unused))
static void neuron_impl_load_neuron_parameters (
    address_t address,
    uint32_t next,
    uint32_t n_neurons,
    address_t save_initial_state
);

__attribute__((unused))
static void neuron_impl_store_neuron_parameters (
    address_t address,
    uint32_t next,
    uint32_t n_neurons
);

__attribute__((unused))
static void neuron_impl_add_inputs (
    index_t synapse_type_index,
    index_t neuron_index,
    input_t weights_this_timestep
);

__attribute__((unused))
static void neuron_impl_do_timestep_update (
    uint32_t timer_count,
    uint32_t time,
    uint32_t n_neurons
);
#if LOG_LEVEL >= LOG_DEBUG
__attribute__((unused))
static void neuron_impl_print_inputs (uint32_t n_neurons);

__attribute__((unused))
static void neuron_impl_print_synapse_parameters (uint32_t n_neurons);

__attribute__((unused))
static const char *neuron_impl_get_synapse_type_char (uint32_t synapse_type);
#endif

#endif
