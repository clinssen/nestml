#include "{{synapseName}}_impl.h"



#include <neuron/plasticity/stdp/weight_dependence/weight.h>
// TODO: Ensure this includes and implements the correct interface
#include <neuron/plasticity/stdp/weight_dependence/weight_one_term.h>
// TODO: Choose the required synapse structure
#include <neuron/plasticity/stdp/synapse_structure/synapse_structure_weight_impl.h>
#include <neuron/plasticity/stdp/timing_dependence/timing.h>

#include <neuron/plasticity/stdp/post_events.h>

//! Configuration parameters
static stdp_params params;

//! \brief The history data of post-events
static post_event_history_t *post_event_history;

//! Count of pre-synaptic events relevant to plastic processing
static uint32_t num_plastic_pre_synaptic_events = 0;

//! Count of times that the plastic math became saturated
static uint32_t plastic_saturation_count = 0;

plasticity_weight_region_data_t *plasticity_weight_region_data;

accum my_potentiation_parameter;
accum my_depression_parameter;

address_t weight_initialise(
        address_t address, uint32_t n_synapse_types,
        uint32_t *ring_buffer_to_input_buffer_left_shifts) {

    // This can be used to indicate the scaling used on the weights
    use(ring_buffer_to_input_buffer_left_shifts);

    log_info("weight_initialise: starting");
    log_info("\tSTDP my weight dependence");

    // Copy plasticity parameter data from address; same format in both
    plasticity_weight_region_data = (plasticity_weight_region_data_t *)
            spin1_malloc(n_synapse_types * sizeof(plasticity_weight_region_data_t));
    if (plasticity_weight_region_data == NULL) {
        log_error("Error allocating plasticity weight data");
        return NULL;
    }
    plasticity_weight_region_data_t *config =
            (plasticity_weight_region_data_t *) address;
    for (uint32_t s = 0; s < n_synapse_types; s++) {
        plasticity_weight_region_data[s].min_weight = config[s].min_weight;
        plasticity_weight_region_data[s].max_weight = config[s].max_weight;
        plasticity_weight_region_data[s].my_parameter = config[s].my_parameter;

        // TODO: Copy any other data
    }
    log_info("weight_initialise: completed successfully");

    // Return end address of region
    return (address_t) &config[n_synapse_types];
}

address_t timing_initialise(address_t address) {

    log_info("timing_initialise: starting");
    log_info("\tSTDP my timing rule");

    // TODO: copy parameters from memory
    my_timing_config_t *config = (my_timing_config_t *) address;
    my_potentiation_parameter = config->my_potentiation_parameter;
    my_depression_parameter = config->my_depression_parameter;

    log_info("my potentiation parameter = %k", my_potentiation_parameter);
    log_info("my depression parameter = %k", my_depression_parameter);
    log_info("timing_initialise: completed successfully");

    // Return the address after the configuration (word aligned)
    return (address_t) (config + 1);
}

static inline bool synapse_dynamics_stdp_init(
        address_t *address, stdp_params *params, uint32_t n_synapse_types,
        uint32_t *ring_buffer_to_input_buffer_left_shifts) {

    // Load parameters
    stdp_params *sdram_params = (stdp_params *) *address;
    spin1_memcpy(params, sdram_params, sizeof(stdp_params));

    // Load timing dependence data
    address_t weight_region_address = timing_initialise(
            (address_t) &sdram_params[1]);
    if (weight_region_address == NULL) {
        return false;
    }

    // Load weight dependence data
    address_t weight_result = weight_initialise(
            weight_region_address, n_synapse_types,
            ring_buffer_to_input_buffer_left_shifts);
    if (weight_result == NULL) {
        return false;
    }

    // Update address to after the region just read
    *address = weight_result;
    return true;
}

input_t synapse_dynamics_get_intrinsic_bias(
        UNUSED uint32_t time, UNUSED index_t neuron_index) {
    return ZERO;
}

uint32_t synapse_dynamics_get_plastic_pre_synaptic_events(void) {
    return 0;
}

uint32_t synapse_dynamics_get_plastic_saturation_count(void) {
    return 0;
}

static inline fixed_stdp_synapse synapse_dynamics_stdp_get_fixed(
        uint32_t control_word, uint32_t time, uint32_t colour_delay) {
    // Extract control-word components
    // **NOTE** cunningly, control word is just the same as lower
    // 16-bits of 32-bit fixed synapse so same functions can be used
    uint32_t delay_dendritic = synapse_row_sparse_delay(control_word,
            synapse_type_index_bits, synapse_delay_mask);
    uint32_t delay_axonal = 0;  //sparse_axonal_delay(control_word);
    uint32_t type_index = synapse_row_sparse_type_index(control_word,
            synapse_type_index_mask);
    return (fixed_stdp_synapse) {
       .delay_dendritic = delay_dendritic,
       .delay_axonal = delay_axonal,
       .type = synapse_row_sparse_type(
                control_word, synapse_index_bits, synapse_type_mask),
       .index = synapse_row_sparse_index(
                control_word, synapse_index_mask),
       .type_index = type_index,
       .ring_buffer_index = synapse_row_get_ring_buffer_index_combined(
                (delay_axonal + delay_dendritic + time) - colour_delay, type_index,
                synapse_type_index_bits, synapse_delay_mask)
    };
}

static inline void synapse_dynamics_stdp_update_ring_buffers(
        weight_t *ring_buffers, fixed_stdp_synapse s, int32_t weight) {
    uint32_t accumulation = ring_buffers[s.ring_buffer_index] + weight;

    uint32_t sat_test = accumulation & 0x10000;
    if (sat_test) {
        accumulation = sat_test - 1;
        plastic_saturation_count++;
    }

    ring_buffers[s.ring_buffer_index] = accumulation;
}

//! packing all of the information into the required plastic control word
static inline control_t control_conversion(
        uint32_t id, uint32_t delay, uint32_t type) {
    control_t new_control =
            (delay & ((1 << synapse_delay_bits) - 1)) << synapse_type_index_bits;
    new_control |= (type & ((1 << synapse_type_index_bits) - 1)) << synapse_index_bits;
    new_control |= id & ((1 << synapse_index_bits) - 1);
    return new_control;
}

uint32_t synapse_dynamics_n_connections_in_row(synapse_row_fixed_part_t *fixed) {
    return synapse_row_num_fixed_synapses(fixed);
}

/*** synapse_dynamics_mad_impl.h ***/

//! The format of the plastic data region of a synaptic row
struct synapse_row_plastic_data_t {
    //! The pre-event history
    pre_event_history_t history;
    //! The per-synapse information
    plastic_synapse_t synapses[];
};

extern uint32_t skipped_synapses;

//---------------------------------------
//! \brief Synapse update loop core
//! \param[in] time: The current time
//! \param[in] last_pre_time: The time of the last previous pre-event
//! \param[in] last_pre_trace: The last previous pre-trace
//! \param[in] new_pre_trace: The new pre-trace
//! \param[in] delay_dendritic: The dendritic delay for the synapse
//! \param[in] delay_axonal: The axonal delay for the synapse
//! \param[in] current_state: The current state
//! \param[in] post_event_history: The history
//! \return The new basic state of the synapse
static inline final_state_t plasticity_update_synapse(
        const uint32_t time,
        const uint32_t last_pre_time, const pre_trace_t last_pre_trace,
        const pre_trace_t new_pre_trace, const uint32_t delay_dendritic,
        const uint32_t delay_axonal, update_state_t current_state,
        const post_event_history_t *post_event_history) {
    // Apply axonal delay to time of last presynaptic spike
    const uint32_t delayed_last_pre_time = last_pre_time + delay_axonal;

    // Get the post-synaptic window of events to be processed
    const uint32_t window_begin_time =
            (delayed_last_pre_time >= delay_dendritic)
            ? (delayed_last_pre_time - delay_dendritic) : 0;
    const uint32_t delayed_pre_time = time + delay_axonal;
    const uint32_t window_end_time =
            (delayed_pre_time >= delay_dendritic)
            ? (delayed_pre_time - delay_dendritic) : 0;
    post_event_window_t post_window = post_events_get_window_delayed(
            post_event_history, window_begin_time, window_end_time);


#if LOG_LEVEL >= LOG_DEBUG
    print_event_history(post_event_history);
    print_delayed_window_events(post_event_history, window_begin_time,
            window_end_time, delay_dendritic);
#endif

    // Process events in post-synaptic window
    while (post_window.num_events > 0) {
        const uint32_t delayed_post_time = *post_window.next_time + delay_dendritic;

        // Apply spike to state
        current_state = timing_apply_post_spike(
                delayed_post_time, *post_window.next_trace, delayed_last_pre_time,
                last_pre_trace, post_window.prev_time, post_window.prev_trace,
                current_state);

        // Go onto next event
        post_window = post_events_next(post_window);
    }

    // Apply spike to state only if there has been a post spike ever
    if (post_window.prev_time_valid) {
        const uint32_t delayed_last_post = post_window.prev_time + delay_dendritic;
        current_state = timing_apply_pre_spike(
                delayed_pre_time, new_pre_trace, delayed_last_pre_time, last_pre_trace,
                delayed_last_post, post_window.prev_trace, current_state);
    }

    // Return final synaptic word and weight
    return synapse_structure_get_final_state(current_state);
}

bool synapse_dynamics_initialise(
        address_t address, uint32_t n_neurons, uint32_t n_synapse_types,
        uint32_t *ring_buffer_to_input_buffer_left_shifts) {

    return true;
}

//---------------------------------------
// Synaptic row plastic-region implementation
//---------------------------------------
void synapse_dynamics_print_plastic_synapses(
        synapse_row_plastic_data_t *plastic_region_data,
        synapse_row_fixed_part_t *fixed_region,
        uint32_t *ring_buffer_to_input_buffer_left_shifts) {

}

//---------------------------------------
//! \brief Get the axonal delay
//! \param[in] x: The packed plastic synapse control word
//! \return the axonal delay
static inline index_t sparse_axonal_delay(uint32_t x) {
#if 1
    // No axonal delay, ever
    __use(x);
    return 0;
#else
    return (x >> synapse_delay_index_type_bits) & SYNAPSE_AXONAL_DELAY_MASK;
#endif
}

//---------------------------------------
void synapse_dynamics_process_post_synaptic_event(
        uint32_t time, index_t neuron_index) {
}

//---------------------------------------
static inline plastic_synapse_t process_plastic_synapse(
        uint32_t control_word, uint32_t last_pre_time, pre_trace_t last_pre_trace,
		pre_trace_t new_pre_trace, weight_t *ring_buffers, uint32_t time,
		uint32_t colour_delay, plastic_synapse_t synapse) {
    fixed_stdp_synapse s = synapse_dynamics_stdp_get_fixed(control_word, time,
            colour_delay);

	// Create update state from the plastic synaptic word
	update_state_t current_state = synapse_structure_get_update_state(
	        synapse, s.type);

	// Update the synapse state
	uint32_t post_delay = s.delay_dendritic;
	if (!params.backprop_delay) {
		post_delay = 0;
	}
	final_state_t final_state = plasticity_update_synapse(
			time - colour_delay, last_pre_time, last_pre_trace, new_pre_trace,
			post_delay, s.delay_axonal, current_state,
			&post_event_history[s.index]);

	// Add weight to ring-buffer entry, but only if not too late
	if (s.delay_axonal + s.delay_dendritic > colour_delay) {
	    int32_t weight = synapse_structure_get_final_weight(final_state);
	    synapse_dynamics_stdp_update_ring_buffers(ring_buffers, s, weight);
    } else {
        skipped_synapses++;
    }

	return synapse_structure_get_final_synaptic_word(final_state);
}

bool synapse_dynamics_process_plastic_synapses(
        synapse_row_plastic_data_t *plastic_region_address,
        synapse_row_fixed_part_t *fixed_region,
        weight_t *ring_buffers, uint32_t time, uint32_t colour_delay,
        bool *write_back) {
    log_error("There should be no plastic synapses!");
    *write_back = false;
    return false;
}

bool synapse_dynamics_find_neuron(
        uint32_t id, synaptic_row_t row, weight_t *weight, uint16_t *delay,
        uint32_t *offset, uint32_t *synapse_type) {
    synapse_row_fixed_part_t *fixed_region = synapse_row_fixed_region(row);
    int32_t fixed_synapse = synapse_row_num_fixed_synapses(fixed_region);
    uint32_t *synaptic_words = synapse_row_fixed_weight_controls(fixed_region);

    // Loop through plastic synapses
    for (; fixed_synapse > 0; fixed_synapse--) {

        // Get next control word (auto incrementing)
        // Check if index is the one I'm looking for
        uint32_t synaptic_word = *synaptic_words++;
        if (synapse_row_sparse_index(synaptic_word, synapse_index_mask) == id) {
            *offset = synapse_row_num_fixed_synapses(fixed_region) -
                    fixed_synapse;
            *weight = synapse_row_sparse_weight(synaptic_word);
            *delay = synapse_row_sparse_delay(synaptic_word,
                    synapse_type_index_bits, synapse_delay_mask);
            *synapse_type = synapse_row_sparse_type(
                    synaptic_word, synapse_index_bits, synapse_type_mask);
            return true;
        }
    }

    return false;
}

bool synapse_dynamics_remove_neuron(uint32_t offset, synaptic_row_t row) {
    synapse_row_fixed_part_t *fixed_region = synapse_row_fixed_region(row);
    int32_t fixed_synapse = synapse_row_num_fixed_synapses(fixed_region);
    uint32_t *synaptic_words = synapse_row_fixed_weight_controls(fixed_region);

    // Delete control word at offset (contains weight)
    synaptic_words[offset] = synaptic_words[fixed_synapse - 1];

    // Decrement FF
    fixed_region->num_fixed--;
    return true;
}

static inline uint32_t _fixed_synapse_convert(
        uint32_t id, weight_t weight, uint32_t delay, uint32_t type) {
    uint32_t new_synapse = weight << (32 - SYNAPSE_WEIGHT_BITS);
    new_synapse |= ((delay & ((1 << synapse_delay_bits) - 1)) <<
            synapse_type_index_bits);
    new_synapse |= ((type & ((1 << synapse_type_bits) - 1)) <<
            synapse_index_bits);
    new_synapse |= (id & ((1 << synapse_type_index_bits) - 1));
    return new_synapse;
}

bool synapse_dynamics_add_neuron(uint32_t id, synaptic_row_t row,
        weight_t weight, uint32_t delay, uint32_t type) {
    synapse_row_fixed_part_t *fixed_region = synapse_row_fixed_region(row);
    int32_t fixed_synapse = synapse_row_num_fixed_synapses(fixed_region);
    uint32_t *synaptic_words = synapse_row_fixed_weight_controls(fixed_region);
    uint32_t new_synapse = _fixed_synapse_convert(id, weight, delay, type);

    // Add control word at offset
    synaptic_words[fixed_synapse] = new_synapse;

    // Increment FF
    fixed_region->num_fixed++;
    return true;
}


//---------------------------------------
// STDP weight dependence functions
//---------------------------------------
static inline weight_state_t weight_get_initial(
        weight_t weight, index_t synapse_type) {

    // TODO: Store the data in the intermediate data structure
    return (weight_state_t ) {
        .initial_weight = (int32_t) weight,
        .potentiation = 0,
        .depression = 0,
        .weight_region = &plasticity_weight_region_data[synapse_type]
    };
}

//---------------------------------------
static inline weight_state_t weight_one_term_apply_depression(
        weight_state_t state, int32_t depression) {

    // TODO: Perform intermediate operations in relation to depression
    // Note: Can save up to perform complex operations until the end
    state.depression += depression;
    return state;
}

//---------------------------------------
static inline weight_state_t weight_one_term_apply_potentiation(
        weight_state_t state, int32_t potentiation) {

    // TODO: Perform intermediate operations in relation to potentiation
    // Note: Can save up to perform complex operations until the end
    state.potentiation += potentiation;
    return state;
}

//---------------------------------------
static inline weight_t weight_get_final(weight_state_t new_state) {

    // TODO: Perform operations to get the final weight from the intermediate
    // state, taking into account all potentiation and depression
    // Note: it is recommended to do a single complex operation here rather
    // than one for each potentiation or depression if possible

    int32_t potentiation =
            new_state.potentiation * new_state.weight_region->my_parameter;
    int32_t depression =
            new_state.depression * new_state.weight_region->my_parameter;

    int32_t new_weight = new_state.initial_weight + potentiation - depression;

    // Clamp new weight
    new_weight = MIN(
            new_state.weight_region->max_weight,
            MAX(new_weight, new_state.weight_region->min_weight));

    log_debug("old_weight:%u, potentiation:%d, depression:%d, "
            "scaled potentiation:%d, scaled depression:%d, new_weight:%d",
            new_state.initial_weight, new_state.potentiation,
            new_state.depression, potentiation, depression, new_weight);

    return (weight_t) new_weight;
}

//---------------------------------------
__attribute__((unused)) // Marked unused as only used sometimes
static void weight_decay(weight_state_t *state, int32_t decay) {
    use(&state);
    use(decay);

    // TODO: Decay the weight inside the state
}

//---------------------------------------
__attribute__((unused)) // Marked unused as only used sometimes
static accum weight_get_update(weight_state_t state) {
    use(&state);
    // TODO: Return the weight inside the state
    return 0;
}

//---------------------------------------
// Timing dependence inline functions
//---------------------------------------
static inline post_trace_t timing_get_initial_post_trace(void) {

    // TODO: Return the values required
    return (post_trace_t) {};
}

//---------------------------------------
static inline post_trace_t timing_add_post_spike(
        uint32_t time, uint32_t last_time, post_trace_t last_trace) {
    use(&last_time);
    use(&last_trace);

    log_debug("\tdelta_time=%u\n", time - last_time);

    // TODO: Perform operations when a new post-spike occurs

    // Return new pre- synaptic event with decayed trace values with energy
    // for new spike added
    return (post_trace_t) {};
}

//---------------------------------------
static inline pre_trace_t timing_add_pre_spike(
        uint32_t time, uint32_t last_time, pre_trace_t last_trace) {
    use(&last_time);
    use(&last_trace);

    log_debug("\tdelta_time=%u\n", time - last_time);

    // TODO: Perform operations when a new pre-spike occurs

    return (pre_trace_t ) {};
}

//---------------------------------------
static inline update_state_t timing_apply_pre_spike(
        uint32_t time, pre_trace_t trace, uint32_t last_pre_time,
        pre_trace_t last_pre_trace, uint32_t last_post_time,
        post_trace_t last_post_trace, update_state_t previous_state) {
    use(&trace);
    use(&last_pre_time);
    use(&last_pre_trace);
    use(&last_post_trace);

    // TODO: Perform depression on pre spikes that occur after the
    // current spike
    accum time_since_last_post = (accum) (time - last_post_time);
    if (time_since_last_post > 0) {
        int32_t decayed_o1 = (int32_t)
                (time_since_last_post * my_depression_parameter);

        log_debug("\t\t\ttime_since_last_post=%k, decayed_o1=%d\n",
                time_since_last_post, decayed_o1);

        // Apply depression to state (which is a weight_state)
        return weight_one_term_apply_depression(previous_state, decayed_o1);
    } else {
        return previous_state;
    }
}

//---------------------------------------
static inline update_state_t timing_apply_post_spike(
        uint32_t time, post_trace_t trace, uint32_t last_pre_time,
        pre_trace_t last_pre_trace, uint32_t last_post_time,
        post_trace_t last_post_trace, update_state_t previous_state) {
    use(&trace);
    use(&last_pre_trace);
    use(&last_post_time);
    use(&last_post_trace);

    // TODO: Perform potentiation on post spikes that occur after the
    // current spike
    accum time_since_last_pre = (accum) (time - last_pre_time);
    if (time_since_last_pre > 0) {
        int32_t decayed_r1 = (int32_t)
                (time_since_last_pre * my_potentiation_parameter);

        log_debug("\t\t\ttime_since_last_pre=%k, decayed_r1=%d\n",
                time_since_last_pre, decayed_r1);

        // Apply potentiation to state (which is a weight_state)
        return weight_one_term_apply_potentiation(previous_state, decayed_r1);
    } else {
        return previous_state;
    }
}

//---------------------------------------
__attribute__((unused)) // Marked unused as only used sometimes
static post_trace_t timing_decay_post(
        uint32_t time, uint32_t last_time, post_trace_t last_trace) {
    use(time);
    use(last_time);

    // TODO: Evolve the post trace without adding a spike
    return last_trace;
}
