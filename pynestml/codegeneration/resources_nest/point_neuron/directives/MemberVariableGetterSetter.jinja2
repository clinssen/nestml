{% if variable_symbol.is_inline_expression and not utils.contains_convolve_call(variable_symbol) -%}
inline {{ declarations.print_variable_type(variable_symbol) }} {{ printer_no_origin.print(variable) }} const
{
  return {{ printer.print(variable_symbol.get_declaring_expression()) }};
}
{%- else -%}
inline {{ declarations.print_variable_type(variable_symbol) }} get_{{ printer_no_origin.print(variable) }}() const
{
  return {{ printer.print(variable) }};
}

inline void set_{{ printer_no_origin.print(variable) }}(const {{ declarations.print_variable_type(variable_symbol) }} __v)
{
  {{ printer.print(variable) }} = __v;
}
{%- endif %}