#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <debug.h>
#include <utils.h>
#include <static-assert.h>
#include <spin1_api.h>

#include <neuron/plasticity/stdp/maths.h>
#include <neuron/plasticity/stdp/stdp_typedefs.h>

#include <neuron/synapses.h>
#include <neuron/synapse_row.h>
#include <neuron/plasticity/synapse_dynamics.h>


//---------------------------------------
// Defines
//---------------------------------------

// These need to be defined before including any synapse stuff
#define SYNAPSE_TYPE_BITS 1
#define SYNAPSE_TYPE_COUNT 2

#ifndef SYNAPSE_AXONAL_DELAY_BITS
#define SYNAPSE_AXONAL_DELAY_BITS 3
#endif

#define SYNAPSE_AXONAL_DELAY_MASK \
    ((1 << SYNAPSE_AXONAL_DELAY_BITS) - 1)

#ifndef __use
#define __use(x)    do { (void) (x); } while (0)
#endif

// TODO: Add any variables to be stored in the post trace structure
typedef struct post_trace_t {
} post_trace_t;

// TODO: Add any variables to be stored in the pre trace structure
typedef struct pre_trace_t {
} pre_trace_t;


typedef struct {
    int32_t min_weight;
    int32_t max_weight;

    int32_t my_parameter;

    // TODO: Put in all required parameters

} plasticity_weight_region_data_t;

typedef struct {
    int32_t initial_weight;

    int32_t potentiation;
    int32_t depression;

    const plasticity_weight_region_data_t *weight_region;

    // TODO: Put in any variables required in the intermediate state
} weight_state_t;

typedef struct {
    //! The event time
    uint32_t prev_time;
    //! The event trace
    pre_trace_t prev_trace;
} pre_event_history_t;

//! The type of configuration parameters in SDRAM (written by host)
typedef struct stdp_params {
    //! The back-propagation delay, in basic simulation timesteps
    uint32_t backprop_delay;
} stdp_params;

typedef struct fixed_stdp_synapse {
    uint32_t delay_dendritic;
    uint32_t delay_axonal;
    uint32_t type;
    uint32_t index;
    uint32_t type_index;
    uint32_t ring_buffer_index;
} fixed_stdp_synapse;

typedef struct my_timing_config {
    accum my_potentiation_parameter;
    accum my_depression_parameter;
} my_timing_config_t;
